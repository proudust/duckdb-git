# name: test/sql/git_log.test
# description: test git_log function
# group: [git]

# Before we load the extension, this will fail
statement error
SELECT * FROM git_log('.');
----
Catalog Error: Table Function with name git_log does not exist!

# Require statement will ensure the extension is loaded from now on
require duckdb_git

# Confirm the extension works - test basic git_log functionality on initial branch
query I
SELECT COUNT(*) FROM git_log('.', revision='initial');
----
1

# Test that we can access specific columns on initial branch
query II
SELECT hash, author FROM git_log('.', revision='initial') ORDER BY timestamp DESC LIMIT 1;
----
b1e7e960fcbee2de7489b7dcca09a9223039521e	Proudust

# Test that all columns are accessible including file changes
statement ok
SELECT hash, author, email, message, timestamp, file_changes FROM git_log('.', revision='initial') LIMIT 1;

# Test that file changes struct array works correctly
query I
SELECT len(file_changes) FROM git_log('.', revision='initial') LIMIT 1;
----
18

# Test that file changes can be unnested and accessed
statement ok
SELECT hash, unnest(file_changes) as change FROM git_log('.', revision='initial') LIMIT 3;

# Test accessing struct fields directly
statement ok
WITH expanded AS (
  SELECT
    hash[1:8] as short_hash,
    unnest(file_changes) as change
  FROM git_log('.', revision='initial')
)
SELECT
  short_hash,
  change.path,
  change.status
FROM expanded
LIMIT 3;

# Test filtering by file status
statement ok
SELECT hash FROM git_log('.', revision='initial')
WHERE list_filter(file_changes, x -> x.status = 'A') != [];
