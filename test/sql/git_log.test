# name: test/sql/git_log.test
# description: test git_log function
# group: [git]

# Before we load the extension, this will fail
statement error
SELECT * FROM git_log('.');
----
Catalog Error: Table Function with name git_log does not exist!

# Require statement will ensure the extension is loaded from now on
require duckdb_git

# Confirm the extension works - test basic git_log functionality on initial branch
query I
SELECT COUNT(*) FROM git_log('.', revision='b1e7e960fcbee2de7489b7dcca09a9223039521e');
----
1

# Test that we can access specific columns on initial branch
query II
SELECT commit_id, author FROM git_log('.', revision='b1e7e960fcbee2de7489b7dcca09a9223039521e') ORDER BY author_timestamp DESC LIMIT 1;
----
b1e7e960fcbee2de7489b7dcca09a9223039521e	Proudust

# Test that all columns are accessible including file changes and parents
statement ok
SELECT commit_id, author, author_email, message, author_timestamp, parents, file_changes FROM git_log('.', revision='b1e7e960fcbee2de7489b7dcca09a9223039521e') LIMIT 1;

# Test that parents array works correctly for initial commit (should be empty)
query I
SELECT len(parents) FROM git_log('.', revision='b1e7e960fcbee2de7489b7dcca09a9223039521e') LIMIT 1;
----
0

# Test that file changes struct array works correctly
query I
SELECT len(file_changes) FROM git_log('.', revision='b1e7e960fcbee2de7489b7dcca09a9223039521e') LIMIT 1;
----
18

# Test that file changes can be unnested and accessed
statement ok
SELECT commit_id, unnest(file_changes) as change FROM git_log('.', revision='b1e7e960fcbee2de7489b7dcca09a9223039521e') LIMIT 3;

# Test that add_lines and del_lines fields are accessible
statement ok
WITH changes AS (
  SELECT unnest(file_changes) as change
  FROM git_log('.', revision='b1e7e960fcbee2de7489b7dcca09a9223039521e')
)
SELECT change.path, change.add_lines, change.del_lines FROM changes LIMIT 3;

# Test that initial commit has positive add_lines and zero del_lines
query I
SELECT COUNT(*) FROM (
  SELECT unnest(file_changes) as change
  FROM git_log('.', revision='b1e7e960fcbee2de7489b7dcca09a9223039521e')
) WHERE change.add_lines > 0 AND change.del_lines = 0;
----
11

# Test accessing struct fields directly
statement ok
WITH expanded AS (
  SELECT
    commit_id[1:8] as short_id,
    unnest(file_changes) as change
  FROM git_log('.', revision='b1e7e960fcbee2de7489b7dcca09a9223039521e')
)
SELECT
  short_id,
  change.path,
  change.status
FROM expanded
LIMIT 3;

# Test filtering by file status
statement ok
SELECT commit_id FROM git_log('.', revision='b1e7e960fcbee2de7489b7dcca09a9223039521e')
WHERE list_filter(file_changes, x -> x.status = 'A') != [];

# Test parents column access
statement ok
SELECT commit_id, parents FROM git_log('.') WHERE len(parents) >= 1 LIMIT 3;

# Test ignore_all_space parameter (should work without errors)
statement ok
SELECT commit_id, len(file_changes) FROM git_log('.', ignore_all_space=true) LIMIT 1;

# Test ignore_all_space parameter set to false
statement ok
SELECT commit_id, len(file_changes) FROM git_log('.', ignore_all_space=false) LIMIT 1;

# Test that ignore_all_space parameter defaults to false
statement ok
SELECT commit_id FROM git_log('.') WHERE commit_id = (SELECT commit_id FROM git_log('.', ignore_all_space=false) LIMIT 1) LIMIT 1;
